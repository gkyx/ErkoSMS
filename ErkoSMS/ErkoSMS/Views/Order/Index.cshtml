@*SIMOCRANE RCMS, Copyright (C)Siemens AG, 2021. *@
@model OrderFilterParameters

@{
    var customers = (List<SelectListItem>)ViewBag.Customers;
}

<div id="buttonsDiv" style="margin-top:20px;">
    <input type="button" id="searchButton" value="Filtrele" />
    <input type="button" id="getAllSales" value="Hepsini getir" />
</div>

<div id="SalesFilterForm" style="display:none">
    @Html.AntiForgeryToken()

    <div class="form-group">
        <label>Satış Durumu</label>
        @Html.EnumDropDownListFor(x => x.State, "Durum Seçin", new { id="statedropdown",@class = "chosen-select form-control", data_placeholder = "Durum Seçiniz"})
    </div>
    <div class="form-group">
        <label>Müşteri</label>
        @Html.DropDownListFor(x => x.Customers, customers, new { id = "customerdropdown", multiple = "multiple", @class = "chosen-select form-control" })
    </div>

    <div style="margin-top: 20px;">
        <button type="button" id="configurationSaveButton" class="btn btn-primary pull-right">Ara</button>
    </div>
</div>

<div style="margin-top:20px">
    <table id="salesTable" class="table table-bordered table-condensed table-hover table-responsive table-striped"></table>
</div>
<script>

    var tb = $("#salesTable");

    $("#getAllSales").on("click",
        function () {
            document.getElementById("SalesFilterForm").style.display = "none";
            destroyTable();
            ERKOSMS.AjaxAction("Order/GetAllSales", {}, false).then(function (data) {
                debugger;
                var datatable = tb.DataTable({
                    autoWidth: true,
                    columns: [
                        { title: "Satış Başlangıç Tarihi", data: "SalesStartDate" },
                        { title: "Fatura Tarihi", data: "InvoiceDate" },
                        { title: "Fatura No", data: "InvoiceNumber" },
                        { title: "Müşteri", data: "Customer.Name" },
                        { title: "Müşteri Ülkesi", data: "Customer.Country" },
                        { title: "Tutar", data: "TotalPrice" },
                        { title: "Kur", data: "Currency" },
                        { title: "Durum", data: "SalesState" }
                    ],
                    data: data,
                    sDom: '<"top"lif<"clear">>rt<"bottom"ip<"clear">>',
                    aaSorting: [], // Initial sorting
                    bInfo: true, // Info is not shown because the total count to show is not known
                    searching: true, // Disable searching TODO: Enable searching if necessary
                    paging: true, // Disable paging in outstanding
                    pageLength: 50,
                    deferRender: true,
                    columnDefs: [
                        {
                            targets: [0, 1],
                            render: formatDate
                        },
                        {
                            targets: [6],
                            render: formatCurrency
                        },
                        {
                            targets: [7],
                            render: formatState
                        }
                    ]
                });
            });
        });

    var formatDate = function (date) {
        if (date == null) {
            return '';
        }
        else {
            return window.moment(date).format("DD-MM-YYYY");
        }

    }

    var formatCurrency = function (data) {
        if (data == 0) {
            return "TL";
        }
        else if (data == 1) {
            return "EUR";
        }
        else if (data == 2) {
            return "USD";
        }
    }

    var formatState = function (data) {
        if (data == -1) {
            return "";
        }
        else if (data == 0) {
            return "İç Satış İletildi";
        }
        else if (data == 1) {
            return "Fatura Kesildi - Yüklendi";
        }
        else if (data == 2) {
            return "Paketleme Bekleniyor";
        }
        else if (data == 3) {
            return "Nakliye Bekleniyor";
        }
        else if (data == 4) {
            return "Ödeme Geldi - Nakliye Bekleniyor";
        }
        else if (data == 5) {
            return "Paketleme Hazır";
        }
        else if (data == 6) {
            return "Paketleme Hazır - Ödeme Bekleniyor";
        }
        else if (data == 7) {
            return "Reddedildi";
        }
        else if (data == 8) {
            return "Cevap Bekleniyor";
        }
    }

    var destroyTable = function () {
        var tb = $("#salesTable");

        if ($.fn.dataTable.isDataTable(tb))
            tb.DataTable().destroy();

        tb.empty();
    };

    var GetSelectedCustomers = function () {
        var result = []
        $("#customerdropdown:selected").each(function () {
            result.push($(this).val());
        });
        return result
    }

    $('#configurationSaveButton').on('click', function () {
        document.getElementById("SalesFilterForm").style.display = "none";
        destroyTable();
        debugger;
        var customerIds = $('#customerdropdown').val();
        ERKOSMS.AjaxAction("Order/GetFilteredSales", { type: 'POST', data: { customerIds: customerIds } }).then(function (data) {
            debugger;
            var datatable = tb.DataTable({
                autoWidth: true,
                columns: [
                    { title: "Satış Başlangıç Tarihi", data: "SalesStartDate" },
                    { title: "Fatura Tarihi", data: "InvoiceDate" },
                    { title: "Fatura No", data: "InvoiceNumber" },
                    { title: "Müşteri", data: "Customer.Name" },
                    { title: "Müşteri Ülkesi", data: "Customer.Country" },
                    { title: "Tutar", data: "TotalPrice" },
                    { title: "Kur", data: "Currency" },
                    { title: "Durum", data: "SalesState" }
                ],
                data: data,
                sDom: '<"top"lif<"clear">>rt<"bottom"ip<"clear">>',
                aaSorting: [], // Initial sorting
                bInfo: true, // Info is not shown because the total count to show is not known
                searching: true, // Disable searching TODO: Enable searching if necessary
                paging: true, // Disable paging in outstanding
                pageLength: 50,
                deferRender: true,
                columnDefs: [
                    {
                        targets: [0, 1],
                        render: formatDate
                    },
                    {
                        targets: [6],
                        render: formatCurrency
                    },
                    {
                        targets: [7],
                        render: formatState
                    }
                ]
            });
        });
    });

    $('#searchButton').on('click', function () {
        document.getElementById("SalesFilterForm").style.display = "block";
    });



</script>